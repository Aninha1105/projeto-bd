"""Initial schema

Revision ID: 3651d658c63d
Revises: 
Create Date: 2025-06-25 00:14:17.650014

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3651d658c63d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('competicao_patrocinador')
    op.drop_table('competicao')
    op.drop_table('submissao')
    op.drop_table('usuario')
    op.drop_table('participante')
    op.drop_table('problema')
    op.drop_table('inscricao')
    op.drop_table('patrocinador')
    op.drop_table('equipe_colaboradores')
    op.drop_table('estatistica')
    op.drop_table('colaborador')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('colaborador',
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('papel', postgresql.ENUM('professor', 'setter', 'tester', 'organizador', name='colaborador_papel'), autoincrement=False, nullable=False),
    sa.Column('id_equipe', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_equipe'], ['equipe_colaboradores.id_equipe'], name=op.f('colaborador_id_equipe_fkey'), onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], name=op.f('colaborador_id_usuario_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_usuario', name=op.f('colaborador_pkey'))
    )
    op.create_table('estatistica',
    sa.Column('id_estatistica', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('media_tempo', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_acerto', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('problema_mais_dificil', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('id_competicao', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_competicao'], ['competicao.id_competicao'], name=op.f('estatistica_id_competicao_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_estatistica', name=op.f('estatistica_pkey')),
    sa.UniqueConstraint('id_competicao', name=op.f('estatistica_id_competicao_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('equipe_colaboradores',
    sa.Column('id_equipe', sa.INTEGER(), server_default=sa.text("nextval('equipe_colaboradores_id_equipe_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id_equipe', name='equipe_colaboradores_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('patrocinador',
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contribuicao', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('logotipo', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], name='patrocinador_id_usuario_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_usuario', name='patrocinador_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('inscricao',
    sa.Column('id_inscricao', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('categoria', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_competicao', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_competicao'], ['competicao.id_competicao'], name=op.f('inscricao_id_competicao_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_usuario'], ['participante.id_usuario'], name=op.f('inscricao_id_usuario_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_inscricao', name=op.f('inscricao_pkey'))
    )
    op.create_table('problema',
    sa.Column('id_problema', sa.INTEGER(), server_default=sa.text("nextval('problema_id_problema_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('titulo', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('nivel', postgresql.ENUM('fácil', 'médio', 'difícil', name='problema_nivel'), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('id_competicao', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_competicao'], ['competicao.id_competicao'], name='problema_id_competicao_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_problema', name='problema_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('participante',
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('universidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('foto', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], name='participante_id_usuario_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_usuario', name='participante_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('usuario',
    sa.Column('id_usuario', sa.INTEGER(), server_default=sa.text("nextval('usuario_id_usuario_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('senha_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('tipo', postgresql.ENUM('admin', 'visitante', 'colaborador', 'participante', 'patrocinador', name='usuario_tipo'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id_usuario', name='usuario_pkey'),
    sa.UniqueConstraint('email', name='usuario_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('submissao',
    sa.Column('id_submissao', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('aceito', 'rejeitado', 'pendente', name='submissao_status'), autoincrement=False, nullable=False),
    sa.Column('id_problema', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_problema'], ['problema.id_problema'], name=op.f('submissao_id_problema_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_usuario'], ['participante.id_usuario'], name=op.f('submissao_id_usuario_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_submissao', name=op.f('submissao_pkey'))
    )
    op.create_table('competicao',
    sa.Column('id_competicao', sa.INTEGER(), server_default=sa.text("nextval('competicao_id_competicao_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('local', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('data', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('id_equipe', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_equipe'], ['equipe_colaboradores.id_equipe'], name='competicao_id_equipe_fkey'),
    sa.PrimaryKeyConstraint('id_competicao', name='competicao_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('competicao_patrocinador',
    sa.Column('id_link', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_competicao', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_usuario_patro', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_competicao'], ['competicao.id_competicao'], name=op.f('competicao_patrocinador_id_competicao_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_usuario_patro'], ['patrocinador.id_usuario'], name=op.f('competicao_patrocinador_id_usuario_patro_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_link', name=op.f('competicao_patrocinador_pkey')),
    sa.UniqueConstraint('id_competicao', 'id_usuario_patro', name=op.f('competicao_patrocinador_id_competicao_id_usuario_patro_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
